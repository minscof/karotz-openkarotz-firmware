#!/bin/bash

source /usr/www/cgi-bin/setup.inc
function Log {
 #TAG=$1
 #MSG=$2
 #ERR=$3

  if [ "$3" == "1" ]; then
    logger -s "[OpenKarotz] [ERROR]" "$1 $2" >> /dev/null 2>> /dev/null
  else
    logger -s "[OpenKarotz]" "$1 $2" >> /dev/null 2>> /dev/null
  fi
}

function dbus_led_pulse {
    UUID=`cat /proc/sys/kernel/random/uuid`
    dbus-send --system --dest=com.mindscape.karotz.Led                                  \
            /com/mindscape/karotz/Led com.mindscape.karotz.KarotzInterface.pulse    \
            string:"$UUID" string:"$1" string:"$2" int32:700 int32:-1
}

function ReadUrlParam 
{  
 saveIFS=$IFS
  IFS='=&'
  parm=($QUERY_STRING)
  IFS=$saveIFS
  for ((i=0; i<${#parm[@]}; i+=2))
  do
      URLParam[${parm[i]}]=${parm[i+1]}
  done
}

BLACK=000000
BLUE=0000FF
CYAN=00FF9F
GREEN=00FF00
ORANGE=FFA500
PINK=FFCFAF
PURPLE=9F00FF
RED=FF0000
VIOLET=660099
WHITE=4FFF68
YELLOW=75FF00

TDIR="/usr/www"
UDIR="$CNF_DATADIR"
SURL=$CNF_BASE_URL

ReadUrlParam

echo "Server: OpenKarotz WebServer 1.0 - Massalia 2013"
echo "Connection: close"
echo "Accept-Ranges: bytes"
echo "Content-type: text/plain"
echo ""

# Checking Forced Update
FU=${URLParam[force]}
UU=${URLParam[usb]}

if [ "$FU" == "1" ] || [ "$1" == "1" ]; then
 rm -f $TDIR/ok.version >>/dev/null 2>>/dev/null
fi

# Enable Logs at next reboot
# Log Install Message in different file
killall syslogd >>/dev/null 2>>/dev/null
echo "" > /$CNF_DATADIR/install.log
/sbin/syslogd -O /$CNF_DATADIR/install.log	>>/dev/null 2>>/dev/null
touch /etc/conf/enable_syslogd >>/dev/null 2>>/dev/null
Log  "[INSTALL]"  "Enabling Syslog"

# Downloading Sound
Log  "[INSTALL]"  "Downloading sounds"
wget $SURL/res/sounds/install_start.mp3 -q -O /tmp/start.mp3 >>/dev/null 2>>/dev/null
wget $SURL/res/sounds/install_end.mp3   -q -O /tmp/end.mp3   >>/dev/null 2>>/dev/null


Log  "[INSTALL]"  "Killing default process"
killall immortaldog >>/dev/null 2>>/dev/null
/karotz/bin/led -l $ORANGE -p "000000" -d 700 &
killall led

if [ -e "/tmp/start.mp3" ]; then
  /usr/bin/madplay /tmp/start.mp3 >>/dev/null 2>>/dev/null
fi

# Checking root Web
if [ ! -d $TDIR ]; then
   Log  "[INSTALL]"  "Creating directory:$TDIR"
   mkdir $TDIR >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi

# Checking Data root
if [ ! -d $CNF_DATADIR ]; then
   Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR"
   mkdir $CNF_DATADIR >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi

# Checking cgi-bin
if [ ! -d $TDIR/cgi-bin ]; then
   Log  "[INSTALL]"  "Creating directory:$TDIR/cgi-bin"
   mkdir $TDIR/cgi-bin >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi   

# Checking images
if [ ! -d $TDIR/images ]; then
   Log  "[INSTALL]"  "Creating directory:$TDIR/images"
   mkdir $TDIR/images >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi

# Checking Snapshots
if [ ! -d $CNF_DATADIR/Snapshots ]; then
   Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Snapshots"
   mkdir $CNF_DATADIR/Snapshots >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi

if [ ! -L $TDIR/snapshots ]; then
   rm -rf $TDIR/snapshots >>/dev/null 2>>/dev/null
   ln -s $CNF_DATADIR/Snapshots $TDIR/snapshots >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Creating snapshots symbolic link" 
fi

# --------------
# Checking Tmp
# --------------
if [ ! -d $CNF_DATADIR/Tmp ]; then
   Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Tmp"
   mkdir $CNF_DATADIR/Tmp >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi
   
# --------------
# Checking Run
# --------------
if [ ! -d $CNF_DATADIR/Run ]; then
   Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Run"
   mkdir $CNF_DATADIR/Run >>/dev/null 2>>/dev/null
   Log  "[INSTALL]"  "Result:$?"
fi

# --------------      
# Checking Rfid
# --------------
if [ ! -d $CNF_DATADIR/Rfid ]; then 
  Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Rfid"
  mkdir $CNF_DATADIR/Rfid >>/dev/null 2>>/dev/null
  Log  "[INSTALL]"  "Result:$?"
fi

# --------------         
# Checking Sounds
# --------------
if [ ! -d $CNF_DATADIR/Sounds ]; then
 Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Sounds"
 mkdir $CNF_DATADIR/Sounds >>/dev/null 2>>/dev/null
 Log  "[INSTALL]"  "Result:$?"
fi
          
# --------------  
# Checking Stories
# --------------
if [ ! -d $CNF_DATADIR/Stories ]; then
 Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Stories"
 mkdir $CNF_DATADIR/Stories >>/dev/null 2>>/dev/null
 Log  "[INSTALL]"  "Result:$?"
fi

# --------------
# Checking Voice
# --------------
if [ ! -d $CNF_DATADIR/Voice ]; then
 Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Voice"
 mkdir $CNF_DATADIR/Voice >>/dev/null 2>>/dev/null
 Log  "[INSTALL]"  "Result:$?"
fi

# --------------
# Checking Moods
# --------------
if [ ! -d $CNF_DATADIR/Moods ]; then 
   Log  "[INSTALL]"  "Creating directory:$CNF_DATADIR/Moods"
   mkdir $CNF_DATADIR/Moods >>/dev/null 2>>/dev/null
fi

# --------------
# Checking FR Moods
# --------------
if [ ! -d $CNF_DATADIR/Moods/fr ]; then
   mkdir $CNF_DATADIR/Moods/fr >>/dev/null 2>>/dev/null
fi

# --------------
# Checking Apps 
# --------------
if [ ! -d $CNF_DATADIR/Apps ]; then
   mkdir $CNF_DATADIR/Apps >>/dev/null 2>>/dev/null
fi

# --------------
# Checking Apps Radios
# --------------
if [ ! -d $CNF_DATADIR/Apps/Streams ]; then
   mkdir $CNF_DATADIR/Apps/Streams >>/dev/null 2>>/dev/null
fi

# --------------
# Checking Apps Story
# --------------
if [ ! -d $CNF_DATADIR/Apps/Story ]; then
   mkdir $CNF_DATADIR/Apps/Story >>/dev/null 2>>/dev/null
fi

if [ ! -d $CNF_DATADIR/Apps/Story/Data ]; then
   mkdir $CNF_DATADIR/Apps/Story/Data >>/dev/null 2>>/dev/null
fi

# --------------
# Checking crontab directories
# --------------
if [ ! -d /usr/spool ]; then
   mkdir /usr/spool >>/dev/null 2>>/dev/null
fi

if [ ! -d /usr/spool/cron ]; then
   mkdir /usr/spool/cron >>/dev/null 2>>/dev/null
fi

if [ ! -d /usr/spool/cron/crontabs ]; then
   mkdir /usr/spool/cron/crontabs >>/dev/null 2>>/dev/null
fi

# --------------
# Get local version
# --------------
if [ ! -f $TDIR/ok.version ]; then
   LV=-1
else
   LV=$(cat $TDIR/ok.version  )
fi

# Create pipes for Program Control
#if [ ! -f /tmp/mpd_control ]; then
#   mknod /tmp/mpd_control p  >>/dev/null 2>>/dev/null
#fi

if [ ! -f /tmp/mplayer-control ]; then
   Log  "[INSTALL]"  "Creating mplayer control pipe"
   mknod /tmp/mplayer-control p  >>/dev/null 2>>/dev/null
fi

# Get server Version
rm $TDIR/server.ok.version >>/dev/null 2>>/dev/null
echo "----------------------------------------"
Log  "[INSTALL]"  "Downloading $SURL/ok.version"
wget $SURL/ok.version -q -O $TDIR/server.ok.version >>/dev/null 2>>/dev/null
if [ ! -e "$TDIR/server.ok.version" ] ; then
  RV=0
else
  RV=$(cat $TDIR/server.ok.version )
fi

# Display version
echo -n "Server Version : "
Log  "[INSTALL]"  "Remote version : $RV"
echo $RV
echo -n "Local Version  : "
echo $LV
Log  "[INSTALL]"  "Local version : $LV"

if [ "${LV:-0}" -ge "${RV:-0}" ] ; then
	echo "----------------------------------------"
  	echo "No update needed"
else
    # Update local version
    rm -f $TDIR/ok.version >>/dev/null 2>>/dev/null
    mv $TDIR/server.ok.version $TDIR/ok.version >>/dev/null 2>>/dev/null
    echo "Web Root  : "$TDIR
    echo "Data Root : "$UDIR 
    
    # Get Web Server Config File
    echo "----------------------------------------"
    echo "Updating Web Server Config"
    echo "----------------------------------------"
    Log  "[INSTALL]"  "Downloading $SURL/httpd.conf"
    wget $SURL/httpd.conf -O /usr/httpd.conf -q > /dev/null 2>>/dev/null
     
    echo "----------------------------------------"
    echo "Updating startup Script"
    echo "----------------------------------------"
    if [ ! -e "/usr/yaffs_start.sh.backup.200" ]; then
     Log  "[INSTALL]"  "Updating Startup Script"
     cp /usr/yaffs_start.sh /usr/yaffs_start.sh.backup.200
     cp /karotz/OkSetup/yaffs_start.sh /usr/yaffs_start.sh
     chmod 777 /usr/yaffs_start.sh
    fi
        
    # Updating /www
    #URL=$1
    #RDIR=$2
    #LDIR=$3
    #NAME=$4
    #GROUP=$5
 
    # Creating cron path
    #/var/spool/cron/crontabs
    mkdir /var/spool >>/dev/null 2>>/dev/null
    mkdir /var/spool/cron >>/dev/null 2>>/dev/null
    mkdir /var/spool/cron/crontabs >>/dev/null 2>>/dev/null
    
    echo "Updating : Scripts"
    echo "  Saving config"
    cp $TDIR/cgi-bin/setup.inc /tmp/setup.inc >>/dev/null 2>>/dev/null
    echo "  Downloading"
    Log  "[INSTALL]"  "Downloading $SURL/www.zip"
    wget $SURL/www.zip -O /tmp/www.zip -q >>/dev/null 2>>/dev/null
    if [ -e "/tmp/www.zip" ]; then
      echo "  Installing"
      unzip  -o /tmp/www.zip  -d /usr/www >>/dev/null 2>>/dev/null
      rm -f /tmp/www.zip >>/dev/null 2>>/dev/null
      echo "  Checking permissions"
      chmod -R 777 /usr/www/cgi-bin >>/dev/null 2>>/dev/null
      echo "  Restoring config"
      cp /tmp/setup.inc $TDIR/cgi-bin/setup.inc >>/dev/null 2>>/dev/null
    else
      echo "Download ERROR1. Exiting"
      exit 1
    fi 
    echo "----------------------------------------"
    echo "Updating : Voices"
    echo "  Downloading"
    Log  "[INSTALL]"  "Downloading $SURL/voice.zip"
    wget $SURL/voice.zip -O /tmp/voice.zip -q >>/dev/null 2>>/dev/null
    if [ -e "/tmp/voice.zip" ]; then
      echo "  Installing"
      unzip  -o /tmp/voice.zip  -d $CNF_DATADIR/Voice >>/dev/null 2>>/dev/null
      rm -f /tmp/voice.zip >>/dev/null 2>>/dev/null
    else
      echo "Download ERROR1. Exiting"
      exit 1
    fi
    echo "----------------------------------------"
    echo "Updating : Sounds"
    echo "  Downloading"
    Log  "[INSTALL]"  "Downloading $SURL/sounds.zip"
    wget $SURL/sounds.zip -O /tmp/sounds.zip -q >>/dev/null 2>>/dev/null
    if [ -e "/tmp/sounds.zip" ]; then
      echo "  Installing"
      unzip  -o /tmp/sounds.zip  -d $CNF_DATADIR/Sounds >>/dev/null 2>>/dev/null
      rm -f /tmp/sounds.zip >>/dev/null 2>>/dev/null
    else
      echo "Download ERROR1. Exiting"
       exit 1
    fi
 
    echo "----------------------------------------"
    echo "Updating : Radios"
    echo "  Downloading"
    Log  "[INSTALL]"  "Downloading $SURL/radios.zip"
    wget $SURL/radios.zip -O /tmp/radios.zip -q >>/dev/null 2>>/dev/null
    if [ -e "/tmp/radios.zip" ]; then
      echo "  Installing"
      unzip  -o /tmp/radios.zip  -d $CNF_DATADIR/Apps/Streams >>/dev/null 2>>/dev/null
      rm -f /tmp/radios.zip >>/dev/null 2>>/dev/null
    else
      echo "Download ERROR1. Exiting"
      exit 1
    fi 
fi
echo "----------------------------------------"
echo  Done
echo   You Must now manually Download Apps
echo   from Update Tab
echo "----------------------------------------"
echo "Rabbit will restart to finish Instllation."

Log  "[INSTALL]"  "Finished"
Log  "[INSTALL]"  "Rebooting in 20 seconds"

#/usr/bin/madplay $UDIR/Voice/install_ok.mp3 >>/dev/null 2>>/dev/null
if [ -e "/tmp/end.mp3" ]; then
  /usr/bin/madplay /tmp/end.mp3 >>/dev/null 2>>/dev/null
fi

killall led
/karotz/bin/led -l $RED -p "000000" -d 700 &

reboot -d 10






